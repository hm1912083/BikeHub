generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Prisma schema

model User {
  id                Int       @id @default(autoincrement())
  name              String
  email             String    @unique
  email_verified_at DateTime? // Optional timestamp
  password          String? // Optional password
  role              String    @default("0")
  remember_token    String?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  sessions          Session[] // One-to-many relationship with Session
  orders            Order[]
}

model PasswordResetToken {
  email      String    @id // Primary key
  token      String
  created_at DateTime?
}

model Session {
  id            String  @id
  user_id       Int?
  user          User?   @relation(fields: [user_id], references: [id])
  ip_address    String? // Up to 45 characters
  user_agent    String? // Text field
  payload       String // Long text field
  last_activity Int
}

model Category {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  slug       String    @unique
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  products   Product[]
}

model Product {
  id          Int      @id @default(autoincrement())
  category_id Int // Assuming a simple foreign key without explicit relation management for simplicity
  name        String   @unique
  slug        String   @unique
  details     String? // Nullable string
  image       String? // Nullable string
  images      String? // Nullable string, consider changing to a Json type or separate table if multiple images are stored
  price       Int
  quantity    Int
  featured    Int? // Nullable integer, consider changing to Boolean if it represents a boolean value
  description String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // If you want to set up a relational field with categories, assuming you have a Category model
  category Category @relation(fields: [category_id], references: [id])

  order_products OrderProduct[]
}

model Order {
  id                 Int      @id @default(autoincrement())
  user_id            Int? // Optional due to 'set null' onDelete
  billing_email      String
  billing_name       String
  billing_address    String
  billing_city       String
  billing_province   String
  billing_postalcode String
  billing_phone      String
  billing_total      Int
  shipped            Boolean  @default(false)
  error              String? // Nullable
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt

  // Relationship
  user           User?          @relation(fields: [user_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  order_products OrderProduct[]
}

model OrderProduct {
  id         Int      @id @default(autoincrement())
  product_id Int? // Optional: can be null
  order_id   Int? // Optional: can be null
  quantity   Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  product Product? @relation(fields: [product_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  order   Order?   @relation(fields: [order_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
}

model Cart {
  id         Int    @id @default(autoincrement())
  user_id    Int?
  product_id Int
  ip_address String
  quantity   Int    @default(1)
  name       String
  price      Float
  slug       String?
  image      String

  @@unique([user_id, product_id])
}
